<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.knime.python3.types" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.knime.python3.types" id="PythonValueFactory" name="PythonValueFactory"/>
      </appinfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="Module"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Module">
      <annotation>
         <documentation>
            Note that each Python module containing PythonValueFactories needs to be in its own &lt;Module&gt; element, even if the Python modules are located in the same directory on disk (i.e. have the same &quot;modulePath&quot;).
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <choice>
               <element ref="PythonValueFactory"/>
               <element ref="FromPandasColumnConverter"/>
               <element ref="ToPandasColumnConverter"/>
            </choice>
         </sequence>
         <attribute name="modulePath" type="string" use="required">
            <annotation>
               <documentation>
                  Path to be put on the Python path when importing the module containing PythonValueFactories.

The path should point to a folder that contains the folder structure &quot;knime/types/ext/&quot;. Inside &quot;ext&quot; there should be the module containing the PythonValueFactories. Specify its name in the &quot;moduleName&quot; attribute.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="moduleName" type="string" use="required">
            <annotation>
               <documentation>
                  Module name that should be imported to find the PythonValueFactories.

This should be of the form &quot;knime.types.ext.mymodule&quot; for extension types.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="PythonValueFactory">
      <complexType>
         <attribute name="PythonClassName" type="string" use="required">
            <annotation>
               <documentation>
                  Name of the class that represents the PythonValueFactory
               </documentation>
            </annotation>
         </attribute>
         <attribute name="ValueFactory" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.knime.core.data.v2.ValueFactory"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="ValueTypeName" type="string" use="required">
            <annotation>
               <documentation>
                  Name of the type of the value which is handled by the PythonValueFactory;
                  naming convention is module_name.type_name
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isDefaultPythonRepresentation" type="boolean">
            <annotation>
               <documentation>
                  Whether this type is the default representation in Python for data written using the specified Java Value Factory. Tables in Python will use this type for columns written by that Java ValueFactory.
Defaults to TRUE. If set to false, the type can be used in Python by casting the column or when writing columns from Python.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="ToPandasColumnConverter">
      <complexType>
         <attribute name="ValueTypeName" type="string">
            <annotation>
               <documentation>
                  If the column dtype string representation matches this value, then this column converter will be executed.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="PythonClassName" type="string">
            <annotation>
               <documentation>
                  The column converter class that should be loaded from the module
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="FromPandasColumnConverter">
      <complexType>
         <attribute name="ValueTypeName" type="string">
            <annotation>
               <documentation>
                  If the column dtype string representation matches this value, then this column converter will be executed.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="PythonClassName" type="string">
            <annotation>
               <documentation>
                  The column converter class that should be loaded from the module
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
